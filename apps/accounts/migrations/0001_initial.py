# Generated by Django 5.2.1 on 2025-06-13 05:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(default='/static/assets/images/default.avif', upload_to='profile_pictures')),
                ('banner_picture', models.ImageField(blank=True, null=True, upload_to='banner_pictures')),
                ('is_creator', models.BooleanField(default=False)),
                ('bio', models.TextField(blank=True, null=True, validators=[django.core.validators.MinLengthValidator(10, message='El texto debe tener al menos 10 caracteres'), django.core.validators.MaxLengthValidator(500, message='El texto debe tener menos de 500 caracteres')])),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{10,15}$', message='El número debe tener entre 10 y 15 dígitos')])),
                ('facebook', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator('^https://www\\.facebook\\.com/[^/]+$', message='El enlace debe ser un enlace válido de Facebook')])),
                ('twitter', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator('^https://twitter\\.com/[^/]+$', message='El enlace debe ser un enlace válido de Twitter')])),
                ('pinterest', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator('^https://pinterest\\.com/[^/]+$', message='El enlace debe ser un enlace válido de Pinterest')])),
                ('instagram', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator('^https://instagram\\.com/[^/]+$', message='El enlace debe ser un enlace válido de Instagram')])),
                ('follows', models.ManyToManyField(blank=True, related_name='followed_by', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
